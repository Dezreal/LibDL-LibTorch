/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package LibDL;

public class ld {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  public ld(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(ld obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        ldModuleJNI.delete_ld(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public static void print() {
    ldModuleJNI.ld_print();
  }

  public static Tensor ones(int size) {
    return new Tensor(ldModuleJNI.ld_ones(size), true);
  }

  public static Tensor zeros(int size) {
    return new Tensor(ldModuleJNI.ld_zeros(size), true);
  }

  public static Tensor randn(int size) {
    return new Tensor(ldModuleJNI.ld_randn__SWIG_0(size), true);
  }

  public static Tensor relu(Tensor self) {
    return new Tensor(ldModuleJNI.ld_relu(Tensor.getCPtr(self), self), true);
  }

  public static Tensor log_softmax(Tensor self, int dim) {
    return new Tensor(ldModuleJNI.ld_log_softmax(Tensor.getCPtr(self), self, dim), true);
  }

  public static Tensor max_pool2d(Tensor self, int kernel_size, int stride) {
    return new Tensor(ldModuleJNI.ld_max_pool2d(Tensor.getCPtr(self), self, kernel_size, stride), true);
  }

  public static Tensor nll_loss(Tensor prediction, Tensor target) {
    return new Tensor(ldModuleJNI.ld_nll_loss(Tensor.getCPtr(prediction), prediction, Tensor.getCPtr(target), target), true);
  }

  public static Tensor dropout(Tensor input, double p, boolean train) {
    return new Tensor(ldModuleJNI.ld_dropout(Tensor.getCPtr(input), input, p, train), true);
  }

  public static Tensor randn(int[] size) {
    return new Tensor(ldModuleJNI.ld_randn__SWIG_1(size), true);
  }

  public ld() {
    this(ldModuleJNI.new_ld(), true);
  }

}
